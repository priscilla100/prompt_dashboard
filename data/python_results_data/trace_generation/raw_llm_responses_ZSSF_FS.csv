formula,standard_ltl,model,approach,initial_response,refined_response
"Eventually(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",F(x1 -> G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Next(Next(Next(Next(Eventually(AtomicProposition(""x1""))))))",X(X(X(X(F(x1))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Eventually(LAnd(AtomicProposition(""x1""),Always(Next(Not(AtomicProposition(""x2""))))))",F(x1 & G(X(!x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = True, x2 = False] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Always(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x3"")))))",x1 -> G(x2 U !x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LOr(Eventually(AtomicProposition(""x2"")),Next(Not(AtomicProposition(""x3""))))))",G(x1 -> (F(x2) | X(!x3))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
"
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))))",G((x1 & X(x1)) -> X(X(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(LImplies(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))))",F(x1) & G(x1 -> X(G(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(LOr(LOr(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2""))),LAnd(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x2"")))))",G((x1 & !x2) | (!x1 & x2) | (!x1 & !x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""X2"")))))",G (x1-> X(!x1 U X2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, X2 = TRUE];[x1 = FALSE, X2 = TRUE] FALSIFYING: [x1 = TRUE, X2 = FALSE];[x1 = TRUE, X2 = FALSE];[x1 = FALSE, X2 = FALSE]
","SATISFYING: [x1 = TRUE, X2 = TRUE];[x1 = FALSE, X2 = TRUE] FALSIFYING: [x1 = TRUE, X2 = FALSE];[x1 = TRUE, X2 = FALSE];[x1 = FALSE, X2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(Next(AtomicProposition(""x2"")))))",G(x1 -> F(X(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
"
"Always(Eventually(LImplies(AtomicProposition(""x4""),Not(LImplies(Eventually(Not(AtomicProposition(""x1""))),LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))))))",G (F(x4 -> (!(F !x1->(x2 & x3))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE, x4 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE, x4 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE, x4 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE, x4 = TRUE]
"
"Always(LAnd(AtomicProposition(""x1""),Eventually(Not(AtomicProposition(""x1"")))))",G(x1 &  F(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)] FALSIFYING: [('x1', True)];[('x1', True)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(LOr(LAnd(LAnd(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),Next(Next(AtomicProposition(""x1"")))),LAnd(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1"")))))))",G((x1 & X(!x1) & X(X(x1))) | (!x1 & X(x1) & X(X(!x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)];[('x1', True)];[('x1', False)];[('x1', True)] FALSIFYING: [('x1', True)];[('x1', True)];[('x1', True)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))",x1 & X(G(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)];[('x1', False)] FALSIFYING: [('x1', True)];[('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LImplies(LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))),AtomicProposition(""x1"")))",G ((!x2 & !x3) -> x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False, x3 = False];[x1 = True, x2 = True, x3 = False];[x1 = True, x2 = False, x3 = True];[x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = False, x2 = False, x3 = False];[x1 = True, x2 = True, x3 = True]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"LAnd(AtomicProposition(""x1""),Always(LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))),Next(Next(Next(AtomicProposition(""x1""))))))))",x1 & G(x1 -> X(!x1) & X(X(!x1)) & X(X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Always(Not(AtomicProposition(""x1"")))))))",G((x1 & X(x1)) -> X(X(G(!x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LImplies(LAnd(AtomicProposition(""x1""),LOr(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3"")))),LImplies(Eventually(LAnd(AtomicProposition(""x2""),LOr(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x3""))))),LAnd(Eventually(LAnd(AtomicProposition(""x3""),LOr(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))),Always(AtomicProposition(""x3"")))))",x1 & (!x2 | !x3) -> F(x2 & (!x1 | !x3)) -> F(x3 & (!x2 | !x1)) & G(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
"
"Until(Not(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))), Eventually(Always(AtomicProposition(""x2""))))",!(x1 & !x2) U (F(G(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1->F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(LAnd(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x3""))),Always(AtomicProposition(""x2"")))",(!x1 & !x3) -> G(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = FALSE, x3 = FALSE, x2 = TRUE];[x1 = FALSE, x3 = FALSE, x2 = FALSE]
"
"LAnd(LAnd(Always(AtomicProposition(""x2"")),Eventually(AtomicProposition(""x1""))),Eventually(Not(AtomicProposition(""x1""))))",G(x2) & F(x1) & F(!x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(LImplies(Next(AtomicProposition(""x1"")),LAnd(AtomicProposition(""x2""),Not(Next(AtomicProposition(""x2""))))))",G(X(x1) -> (x2 & !X(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(LEquiv(AtomicProposition(""x1""),Next(Next(Next(Next(Next(AtomicProposition(""x1""))))))))",G(x1<->X(X(X(X(X(x1)))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"LOr(Always(Not(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x1""))))",G(!x1) | G(F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
"
"Always(LAnd(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x"")),Next(AtomicProposition(""x2"")))),LImplies(AtomicProposition(""x2""),LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))))",G((x1->(!x & X(x2)) ) & (x2->(!x1 & X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(LOr(LAnd(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))),AtomicProposition(""x2""))",x1 & X(!x1) | !x1 & X(x1) -> x2,gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Eventually(LAnd(AtomicProposition(""x1""),Next(Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x1""))))))))",F(x1 & X(F(x1 & G(!x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True];[x1 = False] FALSIFYING: [x1 = True];[x1 = False];[x1 = True]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE]
"
"Eventually(LImplies(LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))),Always(AtomicProposition(""x1""))))",F(!x2 & !x3 -> G(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Not(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3""))),LImplies(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),Not(AtomicProposition(""x1""))))))",G(x1->!(x2 & x3) & ((x2 | x3)->!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"Always(LAnd(Until(Eventually(AtomicProposition(""x1"")), Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x3""))))",G(F(x1) U (!x2) & X(x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G(x1 -> X(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LAnd(Next(AtomicProposition(""x1"")),Always(Eventually(AtomicProposition(""x1"")))))",G(X(x1) & G(F(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"LOr(Next(Next(Next(Next(Next(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))))),Next(Next(Next(AtomicProposition(""x3"")))))",X(X(X(X(X(x1 & x2))))) | X(X(X(x3))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Until(AtomicProposition(""x1""), LAnd(Not(AtomicProposition(""x2"")),AtomicProposition(""x3"")))",x1 U (!x2 & x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
"
"Until(AtomicProposition(""x1""), LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))",x1 U (x2 & x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = False, x2 = True, x3 = True];[x1 = False, x2 = True, x3 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Next(Not(AtomicProposition(""x2""))))))",G(x1 ->X(X(!x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LEquiv(AtomicProposition(""x3""),LAnd(Next(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))))",G (x3 <-> (X(x1 & x2) & F(x1 & x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = False, x2 = False, x3 = True];[x1 = False, x2 = False, x3 = True];[x1 = False, x2 = False, x3 = True] FALSIFYING: [x1 = False, x2 = False, x3 = False];[x1 = True, x2 = True, x3 = True];[x1 = False, x2 = False, x3 = False]
","SATISFYING: [x1 = False, x2 = False, x3 = True];[x1 = False, x2 = False, x3 = True];[x1 = False, x2 = False, x3 = True] FALSIFYING: [x1 = False, x2 = False, x3 = False];[x1 = True, x2 = True, x3 = True];[x1 = False, x2 = False, x3 = True]
"
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(LImplies(AtomicProposition(""x2""),Eventually(Not(AtomicProposition(""x1""))))))",(x1 U x2) & G(x2 -> F (!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"LAnd(Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))),Always(Until(Not(AtomicProposition(""x3"")), LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(x1 ->F(x2)) & G(!x3 U (x1 & x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),LImplies(LAnd(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x1""))))",F(x1 & x2) -> (!x1 U x1) & F(x2)->F(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"LAnd(LAnd(Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2"")))),Always(LImplies(AtomicProposition(""x2""),Next(AtomicProposition(""x3""))))),Always(LImplies(AtomicProposition(""x3""),Next(AtomicProposition(""x1"")))))",G(x1->X(x2)) & G(x2->X(x3)) & G(x3->X(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False, x3 = False];[x1 = False, x2 = True, x3 = False];[x1 = False, x2 = False, x3 = True];[x1 = True, x2 = False, x3 = False] FALSIFYING: [x1 = True, x2 = False, x3 = False];[x1 = False, x2 = False, x3 = True];[x1 = True, x2 = False, x3 = True];[x1 = True, x2 = True, x3 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),LAnd(Until(AtomicProposition(""x2""), AtomicProposition(""x1"")),Always(AtomicProposition(""x3""))))",F(x1)->(x2 U x1) & G(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(LAnd(AtomicProposition(""x3""),Eventually(AtomicProposition(""x2""))))))",G(x1->F(x3 & F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE]
"
"Always(LAnd(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Next(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x2""))))))",G((x1->!x2) & X(!x1->X(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Next(Always(AtomicProposition(""x4""))))",x1 & x2 & x3 -> X(G(x4)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True, x3 = True, x4 = False];[x1 = True, x2 = True, x3 = True, x4 = True];[x1 = True, x2 = True, x3 = True, x4 = True] FALSIFYING: [x1 = True, x2 = True, x3 = True, x4 = False];[x1 = True, x2 = True, x3 = True, x4 = False];[x1 = True, x2 = True, x3 = True, x4 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x3""))),Next(Next(Not(AtomicProposition(""x3"")))))))",G(x1->(X(!x2) & X(x3) & X(X(!x3)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))",G((x1 U !x1) & (!x1 U x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"LImplies(Always(Not(AtomicProposition(""x1""))),LAnd(LImplies(AtomicProposition(""x2""),Next(LAnd(Not(AtomicProposition(""x2"")),AtomicProposition(""x3"")))),LImplies(AtomicProposition(""x3""),Next(LAnd(Not(AtomicProposition(""x3"")),AtomicProposition(""x2""))))))",G(!x1) -> ((x2 -> X(!x2 & x3)) & (x3 ->X(!x3 & x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE]
"
"LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),LAnd(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3""))))",x1 & x2 & x3 -> F(x1) & F(x2) & F(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = True, x2 = True, x3 = True];[x1 = False, x2 = False, x3 = False]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"Always(Next(LImplies(Not(AtomicProposition(""x1"")),LAnd(LAnd(AtomicProposition(""x2""),Next(Not(AtomicProposition(""x2"")))),LAnd(Not(AtomicProposition(""x3"")),Next(AtomicProposition(""x3"")))))))",G(X(!x1->((x2 & X(!x2)) & (!x3 & X(x3))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"Always(LImplies(Eventually(AtomicProposition(""x1"")),LOr(Eventually(AtomicProposition(""x1"")),Eventually(Always(AtomicProposition(""x1""))))))",G(F(x1) -> (F(x1) | F(G(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LAnd(LAnd(LImplies(AtomicProposition(""x3""),LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2""))),LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3""))),Eventually(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")))))",G((x3->!x1 & x2) & ((x1 & x2) -> x3) & F(x1 & x2 & x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
"
"LImplies(Always(AtomicProposition(""x1"")),Until(Always(AtomicProposition(""x2"")), Not(AtomicProposition(""x3""))))",G(x1) -> G(x2) U (!x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"Always(LAnd(LAnd(LAnd(Eventually(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3""))),Next(LImplies(AtomicProposition(""x2""),Next(AtomicProposition(""x1""))))),Always(Until(AtomicProposition(""x4""), AtomicProposition(""x1"")))),Eventually(AtomicProposition(""x2""))))",G (F(x2 & x3) & (X (x2 -> X(x1))) & G(x4 U x1) & F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE, x4 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = FALSE, x4 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE, x4 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = TRUE]
"
"Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))",G(!x1 -> X(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",G(x1 -> G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Until(Not(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x1""))),Next(Always(Not(AtomicProposition(""x1"")))))",!x1 U F(x1) & X(G(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Not(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))))",G(x1-> !(x2 & x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"Always(LAnd(LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3""))),LImplies(AtomicProposition(""x2""),AtomicProposition(""x3""))))",G((x1->x2 U x3) & (x2->x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"LImplies(Next(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",X(x1)->F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LAnd(Always(AtomicProposition(""x1"")),Next(Next(Not(AtomicProposition(""x2"")))))",G(x1) & X(X(!x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x1 = True, x2 = False] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x1 = True, x2 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(Until(AtomicProposition(""x1""), Eventually(AtomicProposition(""x2""))))",G(x1 U F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) -> F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(Always(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3"")))",G(x1 & x2) -> F(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x1 = True, x2 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Eventually(AtomicProposition(""x2"")),Eventually(AtomicProposition(""x3"")))))",G(x1 -> (F(x2) & F(x3))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
"
"Always(Until(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x3""))), LImplies(Not(AtomicProposition(""x1"")),AtomicProposition(""x3""))))",G((x1->!x3) U (!x1->x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x3 = FALSE];[x1 = FALSE, x3 = TRUE];[x1 = TRUE, x3 = FALSE];[x1 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x3 = TRUE];[x1 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x3 = FALSE];[x1 = FALSE, x3 = TRUE];[x1 = TRUE, x3 = FALSE];[x1 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x3 = TRUE];[x1 = FALSE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LImplies(LOr(Next(Not(AtomicProposition(""x1""))),Not(AtomicProposition(""x1""))),Next(AtomicProposition(""x1"")))))",G(x1->X(!x1) | !x1->X(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
"
"LOr(Next(AtomicProposition(""x1"")),Always(AtomicProposition(""x1"")))",X(x1) | G(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LAnd(Until(AtomicProposition(""x1""), LOr(AtomicProposition(""x2""),AtomicProposition(""x3""))),Eventually(AtomicProposition(""x3""))))",G(x1 U (x2 | x3) & F(x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
"
"LAnd(Always(LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),Next(AtomicProposition(""x3"")))),Eventually(AtomicProposition(""x3"")))",G((x1 & x2) ->X(x3)) & F(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x3 = FALSE]
"
"LOr(Always(Not(AtomicProposition(""x2""))),Always(Until(AtomicProposition(""x2""), AtomicProposition(""x1""))))",G(!x2) | G(x2 U x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),Next(AtomicProposition(""x3"")))",x1 & x2 & X(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True), ('x2', True)];[('x3', True)] FALSIFYING: [('x1', True), ('x2', True)];[('x3', False)]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x3 = FALSE]
"
"Always(Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(F(x1 & x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True];[x1 = True, x2 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = False];[x1 = False, x2 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G (x1 ->(X(!x1) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1""))))))",( !x1) U (x1 & X(G (!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', False), ('x2', False)];[('x1', True), ('x2', False)];[('x1', False), ('x2', False)] FALSIFYING: [('x1', False), ('x2', False)];[('x1', False), ('x2', False)];[('x1', True), ('x2', False)];[('x1', True), ('x2', False)]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Not(Eventually(LAnd(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",!F(x1 & X(x1 ) & X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G (x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Until(AtomicProposition(""x1""), Always(Not(AtomicProposition(""x1""))))",(x1) U (G(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)];[('x1', False)] FALSIFYING: [('x1', False)];[('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(LImplies(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))))",F(x1) & G(x1 -> X(G(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))))",G(x1 & X(x1) -> X(X(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LOr(AtomicProposition(""x2""),Eventually(AtomicProposition(""x2"")))))",G(x1 -> x2 | F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Eventually(Not(AtomicProposition(""x1""))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(Always(Not(AtomicProposition(""x1"")))))))",F(!x1) & G(!x1 -> X(G(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
"
"LAnd(Eventually(LAnd(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))),Eventually(LAnd(AtomicProposition(""x3""),Until(Not(AtomicProposition(""x3"")), AtomicProposition(""x2"")))))",F (x1 & F (x2)) & F (x3 & (!x3 U x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False, x3 = True];[x1 = True, x2 = True, x3 = False] FALSIFYING: [x1 = False, x2 = False, x3 = False];[x1 = False, x2 = False, x3 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x2"")),Always(Next(Next(AtomicProposition(""x3"")))))))",G(x1 -> (X(x2) & G(X(X(x3))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"Eventually(AtomicProposition(""x1""))",F(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) & F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True), ('x2', False)];[('x1', False), ('x2', True)] FALSIFYING: [('x1', False), ('x2', False)];[('x1', False), ('x2', False)]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"LAnd(Eventually(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3"")))",F(x1 | x2) & F(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False, x3 = False];[x1 = False, x2 = False, x3 = True] FALSIFYING: [x1 = False, x2 = False, x3 = False];[x1 = False, x2 = False, x3 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
"
"Eventually(AtomicProposition(""x1""))",F(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) & F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = False, x2 = True] FALSIFYING: [x1 = False, x2 = False];[x1 = False, x2 = False]
","SATISFYING: [x1 = True, x2 = False];[x1 = False, x2 = True] FALSIFYING: [x1 = False, x2 = False];[x1 = False, x2 = False]
"
"LAnd(Always(Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2"")))",G (!x1) & F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) & G(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""b""),Next(LOr(Until(AtomicProposition(""c""), AtomicProposition(""a"")),Always(AtomicProposition(""c"")))))",b -> X((c U a) | (G(c))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [b = FALSE, c = FALSE, a = FALSE];[b = FALSE, c = FALSE, a = FALSE] FALSIFYING: [b = TRUE, c = FALSE, a = FALSE];[c = FALSE, a = FALSE]
","SATISFYING: [b = FALSE, c = FALSE, a = FALSE];[b = FALSE, c = FALSE, a = FALSE] FALSIFYING: [b = TRUE, c = FALSE, a = FALSE];[c = FALSE, a = FALSE]
"
"LImplies(Eventually(AtomicProposition(""b"")),Until(Not(AtomicProposition(""b"")), LAnd(AtomicProposition(""a""),Not(AtomicProposition(""b"")))))",(F(b) -> (!b U (a & !b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [b = FALSE, a = FALSE];[b = TRUE, a = FALSE];[b = FALSE, a = TRUE] FALSIFYING: [b = FALSE, a = FALSE];[b = TRUE, a = FALSE];[b = FALSE, a = FALSE]
","SATISFYING: [b = FALSE, a = FALSE];[b = TRUE, a = FALSE];[b = FALSE, a = TRUE] FALSIFYING: [b = FALSE, a = FALSE];[b = TRUE, a = FALSE];[b = FALSE, a = FALSE]
"
"Always(LOr(LOr(AtomicProposition(""a""),AtomicProposition(""b"")),AtomicProposition(""c"")))",G( a | b | c),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True, b = False, c = False];[a = False, b = True, c = False];[a = False, b = False, c = True] FALSIFYING: [a = False, b = False, c = False];[a = True, b = True, c = True]
","SATISFYING: [a = TRUE, b = FALSE, c = FALSE];[a = FALSE, b = TRUE, c = FALSE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = FALSE, b = FALSE, c = FALSE];[a = TRUE, b = TRUE, c = TRUE]
"
"Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""e""))))",G(a -> F(e)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[a = TRUE, e = TRUE] FALSIFYING: [a = TRUE];[a = FALSE];[a = FALSE]
","SATISFYING: [];[];[a = TRUE, e = TRUE] FALSIFYING: [a = TRUE];[];[]
"
"Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('a', True), ('b', False)];[('a', False), ('b', True)] FALSIFYING: [('a', True), ('b', True)];[('a', True), ('b', False)]
","SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),Next(Next(Next(AtomicProposition(""b""))))))",G(a -> X(X(X b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[];[];[] FALSIFYING: [a = TRUE];[];[];[b = FALSE]
","SATISFYING: [a = FALSE];[];[];[];[];[] FALSIFYING: [a = TRUE];[];[];[b = FALSE]
"
"Always(Until(AtomicProposition(""e""), Always(Eventually(AtomicProposition(""d"")))))",G(e U (G(F(d)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [e = TRUE, d = TRUE];[e = TRUE, d = TRUE] FALSIFYING: [e = FALSE, d = FALSE];[e = FALSE, d = FALSE]
","SATISFYING: [e = TRUE, d = TRUE];[e = TRUE, d = TRUE] FALSIFYING: [e = FALSE, d = FALSE];[e = FALSE, d = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),AtomicProposition(""b"")))",G(a -> b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
","SATISFYING: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
"
"Always(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))",G(a & b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('a', True), ('b', True)];[('a', True), ('b', True)] FALSIFYING: [('a', True), ('b', True)];[('a', True), ('b', False)]
","SATISFYING: [a = TRUE, b = TRUE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
"
"LAnd(Always(AtomicProposition(""a"")),Always(LImplies(AtomicProposition(""b""),Not(AtomicProposition(""c"")))))",G(a) & G(b -> !c),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('a', True), ('b', False), ('c', True)];[('a', True), ('b', False), ('c', False)] FALSIFYING: [('a', True), ('b', True), ('c', True)];[('a', True), ('b', False), ('c', False)]
","SATISFYING: [a = TRUE, b = FALSE, c = TRUE];[a = TRUE, b = FALSE, c = FALSE] FALSIFYING: [a = TRUE, b = TRUE, c = TRUE];[a = TRUE, b = FALSE, c = FALSE]
"
"LImplies(Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""b"")))),Always(Eventually(AtomicProposition(""c""))))",G(a -> F (b)) -> G(F(c)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = FALSE, c = TRUE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = TRUE, b = FALSE, c = FALSE];[a = TRUE, b = FALSE, c = FALSE]
","SATISFYING: [a = FALSE, b = FALSE, c = TRUE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = TRUE, b = FALSE, c = FALSE];[a = TRUE, b = FALSE, c = FALSE]
"
"LImplies(Always(Eventually(AtomicProposition(""a""))),Always(Eventually(AtomicProposition(""b""))))",G(F(a)) -> G(F(b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True, b = True];[a = True, b = True] FALSIFYING: [a = True, b = False];[a = True, b = False]
","SATISFYING: [a = True, b = True];[a = True, b = True] FALSIFYING: [a = True, b = False];[a = False, b = False]
"
"LOr(Always(Eventually(AtomicProposition(""a""))),Always(Eventually(AtomicProposition(""b""))))",G(F(a)) | G(F(b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True, b = False];[a = True, b = False] FALSIFYING: [a = False, b = False];[a = False, b = False]
","SATISFYING: [a = True, b = False];[a = True, b = False] FALSIFYING: [a = False, b = False];[a = False, b = False]
"
"Eventually(Always(Not(AtomicProposition(""a""))))",F(G(!a)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[a = FALSE];[a = FALSE] FALSIFYING: [];[a = TRUE];[a = FALSE];[a = FALSE]
","SATISFYING: [a = FALSE];[a = FALSE];[a = FALSE] FALSIFYING: [a = TRUE];[a = FALSE];[a = FALSE]
"
"Always(LImplies(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))),Eventually(AtomicProposition(""c""))))",G (!(a & b) -> F(c)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = FALSE, c = FALSE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = TRUE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = FALSE]
","SATISFYING: [a = FALSE, b = FALSE, c = FALSE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = TRUE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = FALSE]
"
"LAnd(Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))),Always(LOr(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)) & G(a | b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('a', True), ('b', False)];[('a', False), ('b', True)] FALSIFYING: [('a', True), ('b', True)];[('a', True), ('b', False)]
","SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
"
"Always(LImplies(LEquiv(AtomicProposition(""a""),AtomicProposition(""b"")),LEquiv(AtomicProposition(""c""),AtomicProposition(""d""))))",G ((a <-> b) -> (c <-> d)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE, b = TRUE, c = TRUE, d = TRUE];[a = FALSE, b = FALSE, c = FALSE, d = FALSE] FALSIFYING: [a = TRUE, b = TRUE, c = TRUE, d = FALSE];[a = FALSE, b = FALSE, c = FALSE, d = FALSE]
","SATISFYING: [a = TRUE, b = TRUE, c = TRUE, d = TRUE];[a = FALSE, b = FALSE, c = FALSE, d = FALSE] FALSIFYING: [a = TRUE, b = TRUE, c = TRUE, d = FALSE]
"
"Until(Not(AtomicProposition(""a"")), AtomicProposition(""b""))",(!a) U b,gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
","SATISFYING: [a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),Next(Always(Not(AtomicProposition(""b""))))))",G (a -> X(G(!b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[] FALSIFYING: [a = TRUE];[b = TRUE]
","SATISFYING: [a = FALSE];[b = FALSE] FALSIFYING: [a = TRUE];[b = TRUE]
"
"LOr(Until(AtomicProposition(""b""), LAnd(AtomicProposition(""b""),Not(AtomicProposition(""a"")))),Always(AtomicProposition(""b"")))",(b U (b & ! a)) | G(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [b = TRUE];[b = TRUE] FALSIFYING: [b = FALSE];[b = TRUE]
","SATISFYING: [b = TRUE];[b = TRUE] FALSIFYING: [b = FALSE];[b = TRUE]
"
"Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))))",G !(a & b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
","SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
"
"Always(LImplies(LAnd(AtomicProposition(""a""),Next(AtomicProposition(""b""))),Next(Next(AtomicProposition(""c"")))))",G (a & X(b) -> X(X(c))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE, b = FALSE, c = TRUE];[a = FALSE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = TRUE];[a = TRUE, b = TRUE, c = TRUE] FALSIFYING: [a = TRUE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = FALSE]
","SATISFYING: [a = TRUE, b = FALSE, c = TRUE];[a = FALSE, b = TRUE, c = FALSE];[a = FALSE, b = FALSE, c = TRUE] FALSIFYING: [a = TRUE, b = TRUE, c = FALSE];[a = FALSE, b = FALSE, c = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),Next(Eventually(AtomicProposition(""b"")))))",G (a -> X(F(b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[a = TRUE, b = TRUE];[];[a = FALSE];[b = TRUE];[a = TRUE, b = FALSE];[b = TRUE] FALSIFYING: [a = TRUE];[];[];[]
","SATISFYING: [a = TRUE, b = TRUE];[a = TRUE, b = TRUE];[a = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE];[b = FALSE];[b = FALSE]
"
"LAnd(AtomicProposition(""a""),Always(LImplies(AtomicProposition(""a""),LAnd(LAnd(LAnd(LAnd(Next(Not(AtomicProposition(""a""))),Next(Next(Not(AtomicProposition(""a""))))),Next(Next(Next(Not(AtomicProposition(""a"")))))),Next(Next(Next(Next(Not(AtomicProposition(""a""))))))),Next(Next(Next(Next(Next(AtomicProposition(""a""))))))))))",a & G(a -> X(!a) & X(X(!a)) & X(X(X(!a))) & X(X(X(X(!a)))) & X(X(X(X(X(a)))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True];[a = False];[a = False];[a = False];[a = False];[a = True] FALSIFYING: [a = True];[a = True]
","SATISFYING: [a = True];[a = False];[a = False];[a = False];[a = False];[a = True] FALSIFYING: [a = True];[a = True]
"
"LOr(Always(Eventually(AtomicProposition(""a""))),Next(AtomicProposition(""b"")))",G(F(a)) | X(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE];[b = FALSE] FALSIFYING: [a = FALSE];[b = FALSE]
","SATISFYING: [a = TRUE];[b = FALSE] FALSIFYING: [a = FALSE];[b = FALSE]
"
"Always(AtomicProposition(""a""))",G (a),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True];[a = True] FALSIFYING: [a = True];[a = False]
","SATISFYING: [a = True];[a = True] FALSIFYING: [a = True];[a = False]
"
"Always(LImplies(AtomicProposition(""a""),LOr(AtomicProposition(""b""),Next(AtomicProposition(""b"")))))",G (a -> (b | X(b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE];[a = TRUE, b = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
","SATISFYING: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE];[a = TRUE, b = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""b""))))",G (a -> F(b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE];[a = TRUE]
","SATISFYING: [a = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = TRUE];[a = FALSE]
"
"Always(LOr(LOr(AtomicProposition(""a""),Next(AtomicProposition(""a""))),Next(Next(AtomicProposition(""a"")))))",G(a | X(a) | X(X(a))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE];[a = TRUE];[a = TRUE] FALSIFYING: [a = FALSE];[a = FALSE];[a = FALSE]
","SATISFYING: [a = TRUE];[a = TRUE];[a = TRUE] FALSIFYING: [a = FALSE];[a = FALSE];[a = FALSE]
"
"Always(LImplies(Not(AtomicProposition(""a"")),LOr(Next(Not(AtomicProposition(""a""))),Next(Next(AtomicProposition(""a""))))))",G(!a -> (X(!a) | X(X(a)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE];[a = FALSE];[a = TRUE];[a = FALSE] FALSIFYING: [a = FALSE];[a = TRUE];[a = FALSE]
","SATISFYING: [a = FALSE];[a = FALSE];[a = TRUE];[a = FALSE] FALSIFYING: [a = FALSE];[a = TRUE];[a = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),LOr(LOr(Next(Not(AtomicProposition(""a""))),Next(Next(Not(AtomicProposition(""a""))))),Next(Next(Next(AtomicProposition(""a"")))))))",G(a -> (X(!a) | X(X(!a)) | X(X(X(a))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE];[a = FALSE];[a = FALSE];[a = TRUE] FALSIFYING: [a = TRUE];[a = TRUE];[a = TRUE];[a = FALSE]
","SATISFYING: [a = TRUE];[a = FALSE];[a = FALSE];[a = TRUE] FALSIFYING: [a = TRUE];[a = TRUE];[a = TRUE];[a = FALSE]
"
"Always(LImplies(AtomicProposition(""a""),Next(AtomicProposition(""b""))))",G ( a -> X(b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE];[b = TRUE] FALSIFYING: [a = TRUE];[b = FALSE]
","SATISFYING: [a = FALSE];[b = TRUE] FALSIFYING: [a = TRUE];[b = FALSE]
"
"Eventually(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))",F (a & b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True, b = True] FALSIFYING: [a = True, b = False];[a = False, b = True]
","SATISFYING: [a = True, b = True] FALSIFYING: [a = True, b = False];[a = False, b = True]
"
"LAnd(Eventually(AtomicProposition(""a"")),Eventually(AtomicProposition(""b"")))",F(a) & F(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = True];[b = True] FALSIFYING: [a = True];[a = True]
","SATISFYING: [a = True];[b = True] FALSIFYING: [a = True];[a = True]
"
"Always(LEquiv(AtomicProposition(""a""),Next(AtomicProposition(""b""))))",G(a <-> X(b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
","SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = FALSE, b = TRUE]
"
"LOr(Until(AtomicProposition(""a""), AtomicProposition(""b"")),Always(AtomicProposition(""a"")))",(a U b) | G(a),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE, b = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = FALSE, b = TRUE];[a = TRUE, b = FALSE]
","SATISFYING: [a = TRUE, b = FALSE];[a = TRUE, b = TRUE] FALSIFYING: [a = FALSE, b = TRUE];[a = FALSE, b = FALSE]
"
"Always(LImplies(AtomicProposition(""x2""),AtomicProposition(""x1"")))",G(x2 -> x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
"
"Always(LEquiv(AtomicProposition(""x1""),AtomicProposition(""x2"")))",G(x1 <-> x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True];[x1 = True, x2 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = False]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""a""),Until(AtomicProposition(""c""), AtomicProposition(""b""))))",G(a -> (c U b)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = TRUE, c = TRUE];[a = FALSE, b = TRUE, c = TRUE];[a = TRUE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = TRUE] FALSIFYING: [a = TRUE, b = FALSE, c = FALSE];[a = TRUE, b = FALSE, c = FALSE]
","SATISFYING: [a = FALSE, b = TRUE, c = TRUE];[a = FALSE, b = TRUE, c = TRUE];[a = TRUE, b = TRUE, c = FALSE];[a = TRUE, b = TRUE, c = TRUE] FALSIFYING: [a = TRUE, b = FALSE, c = FALSE];[a = TRUE, b = FALSE, c = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))),Always(LOr(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)) & G(a | b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [[('a', True), ('b', False)]];[[('a', False), ('b', True)]] FALSIFYING: [[('a', True), ('b', True)]];[[('a', True), ('b', False)]]
","SATISFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
"
"Until(Not(AtomicProposition(""a"")), AtomicProposition(""b""))",(!a) U b,gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
","SATISFYING: [a = FALSE, b = TRUE] FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
"
"LOr(Until(AtomicProposition(""a""), AtomicProposition(""b"")),Always(AtomicProposition(""a"")))",(a U b) | G(a),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [a = TRUE];[a = TRUE] FALSIFYING: [a = FALSE];[b = TRUE]
","SATISFYING: [a = TRUE];[a = TRUE] FALSIFYING: [a = FALSE];[b = TRUE]
"
"Until(Not(AtomicProposition(""p"")), Until(AtomicProposition(""p""), Until(Not(AtomicProposition(""p"")), Until(AtomicProposition(""p""), Always(Not(AtomicProposition(""p"")))))))",!p U (p U (!p U (p U G(!p)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [p = FALSE];[p = TRUE];[p = FALSE];[p = TRUE];[p = FALSE];[p = FALSE] FALSIFYING: [p = FALSE];[p = TRUE];[p = FALSE];[p = FALSE]
","SATISFYING: [p = FALSE];[p = TRUE];[p = FALSE];[p = TRUE];[p = FALSE];[p = FALSE] FALSIFYING: [p = FALSE];[p = TRUE];[p = FALSE];[p = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),LOr(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),AtomicProposition(""x4"")))))",G!(x1 & (x2 | x3 | x4)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),LOr(AtomicProposition(""x2""),AtomicProposition(""x1"")))))",G!(x1 & (x2 | x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Next(Until(AtomicProposition(""x2""), LAnd(AtomicProposition(""x3""),AtomicProposition(""x4"")))))",x1 -> X(x2 U (x3 & x4)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE, x4 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE, x4 = FALSE]
"
"Eventually(LImplies(AtomicProposition(""x1""),Eventually(Not(AtomicProposition(""x1"")))))",F(x1 -> F(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)] FALSIFYING: [('x1', True)];[('x1', True)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = True, b = False];[r = True, b = True] FALSIFYING: [r = True, b = False];[r = False, b = True]
","SATISFYING: [r = TRUE, b = FALSE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = FALSE];[r = FALSE, b = TRUE]
"
"LAnd(AtomicProposition(""r""),Not(Next(AtomicProposition(""b""))))",r & !X(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [[('r', True)], [('b', False)]] FALSIFYING: [[('r', True), ('b', True)], [('b', True)]]
","SATISFYING: [r = TRUE];[b = FALSE] FALSIFYING: [r = TRUE, b = TRUE];[b = FALSE]
"
"Always(LImplies(AtomicProposition(""r""),Next(LAnd(Not(AtomicProposition(""r"")),Next(AtomicProposition(""r""))))))",G(r -> X(!r & X(r))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = FALSE];[r = FALSE];[r = FALSE] FALSIFYING: [r = TRUE];[r = TRUE];[r = FALSE]
","SATISFYING: [r = FALSE];[r = FALSE];[r = FALSE] FALSIFYING: [r = TRUE];[r = TRUE]
"
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = True, b = False];[r = True, b = True] FALSIFYING: [r = True, b = False];[r = False, b = True]
","SATISFYING: [r = TRUE, b = FALSE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = FALSE];[r = FALSE, b = TRUE]
"
"LAnd(AtomicProposition(""r""),Not(Next(AtomicProposition(""b""))))",r & !X(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = True, b = False];[r = False, b = False] FALSIFYING: [r = True, b = True];[r = False, b = True]
","SATISFYING: [r = True, b = False];[r = False, b = False] FALSIFYING: [r = True, b = True];[r = False, b = True]
"
"Always(Not(AtomicProposition(""r"")))",G(!r),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[] FALSIFYING: [r = TRUE];[];[]
","SATISFYING: [r = FALSE];[r = FALSE];[r = FALSE] FALSIFYING: [r = TRUE];[r = FALSE];[r = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1""))))))",(!x1) U (x1 & X(G(!x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = TRUE]
"
"Not(Eventually(LAnd(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",!F(x1 & X(x1) & X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1-> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Until(AtomicProposition(""r""), Not(AtomicProposition(""r""))),Always(LImplies(Not(AtomicProposition(""r"")),Always(Not(AtomicProposition(""r""))))))",(r U !r) & (G(!r -> G(!r))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = FALSE];[r = TRUE] FALSIFYING: [r = FALSE];[r = TRUE];[r = FALSE]
","SATISFYING: [r = FALSE];[r = TRUE] FALSIFYING: [r = FALSE];[r = FALSE];[r = TRUE];[r = FALSE]
"
"Always(Eventually(AtomicProposition(""r"")))",G(F(r)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = TRUE];[r = TRUE] FALSIFYING: [r = FALSE];[r = FALSE]
","SATISFYING: [r = TRUE];[r = TRUE] FALSIFYING: [r = FALSE];[r = FALSE]
"
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Next(Next(Eventually(Next(AtomicProposition(""r"")))))",X(X(F(X(r)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[r = TRUE] FALSIFYING: [];[];[];[r = FALSE]
","SATISFYING: [];[];[];[r = TRUE] FALSIFYING: [];[];[];[r = FALSE]
"
"LImplies(Eventually(AtomicProposition(""r"")),Always(AtomicProposition(""b"")))",F(r) -> G(b),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = FALSE, b = TRUE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = TRUE];[r = FALSE, b = FALSE]
","SATISFYING: [r = FALSE, b = TRUE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = TRUE];[r = FALSE, b = FALSE]
"
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = TRUE, b = FALSE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = FALSE];[r = FALSE, b = TRUE]
","SATISFYING: [r = TRUE, b = FALSE];[r = TRUE, b = TRUE] FALSIFYING: [r = TRUE, b = FALSE];[r = FALSE, b = TRUE]
"
"Always(LImplies(AtomicProposition(""r""),LAnd(Next(Not(AtomicProposition(""r""))),Next(Next(AtomicProposition(""r""))))))",G(r -> X(!r) & X(X(r))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = TRUE];[r = FALSE];[r = TRUE];[r = FALSE];[r = TRUE] FALSIFYING: [r = TRUE];[r = TRUE];[r = FALSE]
","SATISFYING: [r = TRUE];[r = FALSE];[r = TRUE];[r = FALSE];[r = TRUE] FALSIFYING: [r = TRUE];[r = TRUE];[r = FALSE]
"
"Always(LImplies(AtomicProposition(""r""),Not(Next(AtomicProposition(""g"")))))",G(r -> !X(g)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [r = FALSE, g = TRUE];[r = FALSE, g = FALSE];[r = TRUE, g = FALSE];[r = TRUE, g = TRUE] FALSIFYING: [r = TRUE, g = FALSE];[r = FALSE, g = TRUE];[r = TRUE, g = TRUE]
","SATISFYING: [r = TRUE, g = FALSE];[r = TRUE, g = FALSE] FALSIFYING: [r = TRUE, g = FALSE];[r = FALSE, g = TRUE]
"
"Eventually(LAnd(AtomicProposition(""b""),Next(Eventually(AtomicProposition(""b"")))))",F(b & X(F(b))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [b = TRUE];[b = TRUE] FALSIFYING: [b = TRUE];[b = FALSE]
","SATISFYING: [b = TRUE];[b = TRUE] FALSIFYING: [b = TRUE];[b = FALSE]
"
"LAnd(AtomicProposition(""x1""),Always(LImplies(AtomicProposition(""x1""),Next(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))))",x1 & G(x1 -> X(!x1 & X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)];[('x1', True)] FALSIFYING: [('x1', True)];[('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Always(Not(Next(AtomicProposition(""x1""))))))",!x1 U (x1 & G(!X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(LOr(Not(AtomicProposition(""x1"")),AtomicProposition(""x2"")),Next(Not(AtomicProposition(""x3"")))))",G((!x1 | x2) -> X(!x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G(x1 -> X(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))))",G(x1 & !x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True), ('x2', False)];[('x1', True), ('x2', False)] FALSIFYING: [('x1', True), ('x2', True)];[('x1', True), ('x2', False)]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x1"")))",(x1 & !x2) -> X(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2"")),Eventually(AtomicProposition(""x3"")))",(!x1 & x2) -> F(x3 ),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),AtomicProposition(""x2""))",x1 -> x2,gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(AtomicProposition(""x1""))",G (x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', True)];[('x1', True)] FALSIFYING: [('x1', True)];[('x1', False)];[('x1', True)]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(Eventually(AtomicProposition(""x1"")))",G (F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(Until(Not(AtomicProposition(""x2"")), AtomicProposition(""x3"")))))",G(x1 -> G(!x2 U x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),AtomicProposition(""x2"")))",G (x1 -> x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G(x1 -> G(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))",G ( !x2 -> !x1 ),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Until(AtomicProposition(""x1""), AtomicProposition(""x4""))))",G(x1 & x2 & x3 -> (x1 U x4)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE, x4 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE]
"
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) -> G(F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Eventually(Always(AtomicProposition(""x1"")))",F(G(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = True];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"Always(Eventually(AtomicProposition(""x1"")))",G(F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = False];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Always(Not(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))))",G!(x1 & !x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(Eventually(AtomicProposition(""x1"")))",G(F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = False];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Eventually(Always(AtomicProposition(""x1"")))",F(G(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = True];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) -> G(F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Until(AtomicProposition(""x2""), AtomicProposition(""x4""))))",G (x1 & x2 & x3 -> (x2 U x4)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE]
"
"LAnd(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) &G(F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = False, x2 = True];[x1 = True, x2 = False];[x1 = False, x2 = True] FALSIFYING: [x1 = True, x2 = False];[x1 = True, x2 = False];[x1 = True, x2 = False]
","SATISFYING: [x1 = True, x2 = False];[x1 = False, x2 = True] FALSIFYING: [x1 = False, x2 = False];[x1 = True, x2 = False]
"
"Always(LImplies(AtomicProposition(""x2""),Next(Until(Not(AtomicProposition(""x2"")), AtomicProposition(""x1"")))))",G(x2->X(!x2 U x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G (x1 -> X(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(LAnd(AtomicProposition(""x3""),AtomicProposition(""x2"")),AtomicProposition(""x1"")))",G(x3 & x2 -> x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False, x3 = False];[x1 = True, x2 = False, x3 = True];[x1 = True, x2 = True, x3 = False];[x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = False, x2 = True, x3 = True];[x1 = True, x2 = True, x3 = True]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"Next(Next(Next(Next(Eventually(AtomicProposition(""x1""))))))",X(X(X(X(F(x1))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Eventually(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",F(x1 -> G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x2"")))))",F(x1 & G(!x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = True, x2 = False] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Always(LAnd(Not(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x1""))))",G(!x1 & F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"LAnd(Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))",G(x1 -> X(!x1)) & G(!x1 -> X(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', False)];[('x1', True)];[('x1', False)] FALSIFYING: [('x1', True)];[('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LEquiv(Next(AtomicProposition(""x1"")),LEquiv(AtomicProposition(""x2""),Next(Not(AtomicProposition(""x2""))))))",G(X(x1) <-> (x2 <-> X(!x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(AtomicProposition(""x1"")),Next(Next(AtomicProposition(""x1"")))),Next(Next(Next(Not(AtomicProposition(""x1"")))))))",x1 -> (X(x1) & X(X(x1)) & X(X(X(!x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', True)];[('x1', True)];[('x1', False)] FALSIFYING: [('x1', True)];[('x1', True)];[('x1', True)];[('x1', True)]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))))",G(x1 -> X(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1"")))))",G((x1 U !x1) & (F(!x1 U x1)) ),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Eventually(LImplies(AtomicProposition(""x1""),LOr(Next(Next(Always(Not(AtomicProposition(""x1""))))),Always(Not(AtomicProposition(""x1""))))))",F(x1->(X(X(G(!x1)))) | G(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE]
"
"Always(Until(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")), AtomicProposition(""x3"")))",G((x1 & x2) U x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True, x3 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Eventually(Eventually(AtomicProposition(""x1"")))",F(F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = False];[x1 = True] FALSIFYING: [x1 = False];[x1 = False]
","SATISFYING: [x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"Eventually(LAnd(Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))))",F(G(x1->X!x1) & G(!x1->X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Until(AtomicProposition(""x1""), LAnd(AtomicProposition(""x2""),Next(Next(AtomicProposition(""x2"")))))",x1 U (x2 & X(X(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LOr(Always(AtomicProposition(""x1"")),Eventually(Not(AtomicProposition(""x1"")))))",G(G(x1) | F(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LAnd(LAnd(Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Until(AtomicProposition(""x1""), AtomicProposition(""x2""))),Until(AtomicProposition(""x2""), AtomicProposition(""x1"")))",G(x1 | x2) & x1 U x2 & x2 U x1,gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
"
"LAnd(Always(LImplies(AtomicProposition(""x1""),Next(LOr(AtomicProposition(""x2""),AtomicProposition(""X3""))))),Always(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))))))",G(x1 -> X(x2 | X3)) & G(x1-> (!x2 & !x3)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, X3 = FALSE];[x1 = FALSE, x2 = TRUE, X3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, X3 = FALSE];[x1 = FALSE, x2 = FALSE, X3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x2 = FALSE, X3 = TRUE]
"
"LImplies(Eventually(AtomicProposition(""x2"")),Until(Not(AtomicProposition(""x2"")), LAnd(AtomicProposition(""x1""),AtomicProposition(""x3""))))",F(x2) -> !x2 U (x1 & x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
"
"Not(Eventually(Not(AtomicProposition(""x1""))))",!F(!x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
"
"Always(LAnd(LAnd(AtomicProposition(""x1""),Until(Always(AtomicProposition(""x2"")), AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2""))))",G(x1 & (G(x2) U x1) & F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))),Eventually(AtomicProposition(""x3"")))",G(x1& !x2) & F(x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = True, x2 = False];[x1 = True, x2 = False, x3 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Eventually(Always(AtomicProposition(""x1""))))",G(F(x1)) -> F(G(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"LImplies(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2""))))",x1 & !x2 -> F(!x1 U x2 ),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Always(LImplies(AtomicProposition(""x1""),LImplies(LAnd(AtomicProposition(""x2""),AtomicProposition(""x2"")),AtomicProposition(""x1"")))))",(F(x1) & F(x2)) -> G(x1 -> x2 & x2 -> x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
"
"Until(Not(Always(AtomicProposition(""x1""))), Always(Not(AtomicProposition(""x1""))))",!(G(x1)) U G(!x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1"")))))",F(x1) -> G(x1 U !x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Always(LAnd(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))",G((x1 -> X(!x1)) & (!x1 -> X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = False];[x1 = True];[x1 = False] FALSIFYING: [x1 = True];[x1 = True]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(Eventually(Next(AtomicProposition(""x1""))))",G(F(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"LAnd(Always(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x1""))))",G(x1) & G(!x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
","SATISFYING: [] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"LImplies(Next(Next(AtomicProposition(""x1""))),Next(AtomicProposition(""x1"")))",X(X(x1))->X(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True];[x1 = True];[x1 = True] FALSIFYING: [x1 = True];[x1 = False];[x1 = True];[x1 = True]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = TRUE]
"
"Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x1"")))))",F(x1 & G(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [] FALSIFYING: [[('x1', True)]]
","SATISFYING: [x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Always(Until(Eventually(AtomicProposition(""x2"")), Next(AtomicProposition(""x1""))))",G(F(x2) U X(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(Next(Always(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x1"")))",X(G(x1)) -> F(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE]
"
"Until(AtomicProposition(""x3""), LAnd(LOr(AtomicProposition(""x1""),Always(AtomicProposition(""x3""))),Eventually(AtomicProposition(""x2""))))",x3 U ((x1 | G(x3)) & F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x1"")))",x1 -> X(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', True)] FALSIFYING: [('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"Eventually(LAnd(Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x1"")),Next(Next(Not(AtomicProposition(""x1""))))))),Always(LImplies(Not(AtomicProposition(""x1"")),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))))",F(G(x1 -> X(x1) & X(X(!x1))) & G(!x1->X(!x1) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LImplies(AtomicProposition(""x1""),Always(LAnd(Not(AtomicProposition(""x2"")),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))))",(x1 -> G(!x2 & F(!x1 U x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))",G(x1 U !x1 & !x1 U x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
"
"Eventually(LOr(LEquiv(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x2"")))),Always(AtomicProposition(""x2""))))",F((x1 <-> X(!x2)) | G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
"
"Always(LImplies(AtomicProposition(""x2""),LImplies(LAnd(Not(Eventually(AtomicProposition(""x1""))),AtomicProposition(""x3"")),Not(Eventually(AtomicProposition(""x2""))))))",G(x2 -> !F(x1) & x3 -> !F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
"
"Eventually(Always(Until(AtomicProposition(""x1""), AtomicProposition(""x2""))))",F(G(x1 U x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),LAnd(Next(AtomicProposition(""x3"")),Next(Next(Not(AtomicProposition(""x3""))))))",(x1 & x2) -> (X(x3) & X(X(!x3))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x3 = True, x1 = True, x2 = True];[x3 = False, x1 = True, x2 = True] FALSIFYING: [x1 = True, x2 = True];[x1 = True, x2 = True];[x3 = True, x1 = True, x2 = True];[x3 = True, x1 = True, x2 = True]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x3 = TRUE];[x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x3 = TRUE];[x3 = TRUE]
"
"LAnd(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),LImplies(Next(AtomicProposition(""x1"")),Next(Next(AtomicProposition(""x1"")))))",(x1 -> X(x1)) & (X(x1) -> X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True)];[('x1', True)];[('x1', True)] FALSIFYING: [('x1', False)];[('x1', True)];[('x1', False)]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Eventually(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x1"")))))",x1 -> F(x2 U !x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Next(Next(Next(AtomicProposition(""x1"")))),LAnd(Eventually(Not(AtomicProposition(""x2""))),AtomicProposition(""x3"")))",X(X(X(x1))) -> (F(!x2) & x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE] FALSIFYING: [x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = FALSE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
"
"LAnd(Always(Until(AtomicProposition(""x1""), AtomicProposition(""x2""))),Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(x1 U x2) & G(!(x1 & x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(Eventually(Next(Next(Next(AtomicProposition(""x1""))))))",G(F(X(X(X(x1))))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Always(LAnd(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),LImplies(AtomicProposition(""x2""),Not(AtomicProposition(""x1"")))))",G((x1 -> ! x2) & (x2 -> ! x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(Next(Next(Next(AtomicProposition(""x1"")))),AtomicProposition(""x2"")))",G(X(X(X(x1))) -> x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"Eventually(Always(Eventually(AtomicProposition(""x1""))))",F(G(F(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = FALSE]
"
"Always(LImplies(Next(Not(AtomicProposition(""x1""))),AtomicProposition(""x1"")))",G(X(!x1) -> x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE]
"
"LAnd(Always(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))))),Always(LImplies(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),Not(AtomicProposition(""x1"")))))",G(x1->!x2 & !x3) & G(x2 | x3 -> !x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = TRUE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x2"")),Next(Next(Not(AtomicProposition(""x3"")))))))",G(x1 -> (X(x2) & X(X(!x3)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[]
","SATISFYING: [];[];[];[] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE];[]
"
"Always(LImplies(LAnd(Eventually(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),AtomicProposition(""x2"")),Not(AtomicProposition(""x2""))))",G(F(x1 -> X(!x1)) & x2 -> !x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"LImplies(Always(Not(AtomicProposition(""x1""))),LOr(Always(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(!x1) -> (G(x1) | F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LImplies(Always(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(G(x1) -> F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LOr(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))))",(x1 U x2) | G(x1 -> X(!x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LAnd(Next(AtomicProposition(""x1"")),Eventually(LImplies(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(X(x1) & F(x1 -> x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))),Eventually(Not(AtomicProposition(""x1""))))",X(!x1 U x1) -> F(!x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LImplies(Eventually(LAnd(AtomicProposition(""x2""),AtomicProposition(""x1""))),LOr(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Next(AtomicProposition(""x2""))))",F(x2 & x1) -> (x1 U x2) | (X(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Eventually(Always(AtomicProposition(""x1""))))",x1 -> F(G(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"LAnd(LImplies(LAnd(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3""))),AtomicProposition(""x4"")),LImplies(LOr(LOr(Not(Eventually(AtomicProposition(""x1""))),Not(Eventually(AtomicProposition(""x2"")))),Not(Eventually(AtomicProposition(""x3"")))),Not(AtomicProposition(""x4""))))",((F(x1) & F(x2) & F(x3)) -> x4) & (!F(x1) | !F(x2) | !F(x3) -> !x4),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = True, x3 = True, x4 = True];[x1 = True, x2 = True, x3 = True, x4 = True] FALSIFYING: [x1 = True, x2 = True, x3 = True, x4 = False];[x1 = True, x2 = True, x3 = True, x4 = False]
","SATISFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE, x4 = FALSE]
"
"LAnd(Always(LAnd(LImplies(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x2""))),LImplies(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))),Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(((!x1) -> (!x2)) & ((!x2)->(!x1))) & F(x1 & x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
"
"LImplies(Next(AtomicProposition(""x1"")),Next(Next(Next(AtomicProposition(""x2"")))))",X(x1)->X(X(X(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))))",G(x1 & !x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [('x1', True), ('x2', False)];[('x1', True), ('x2', False)] FALSIFYING: [('x1', True), ('x2', True)];[('x1', True), ('x2', False)]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LOr(Eventually(Always(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x1""))))",F(G(x1)) | G(F(x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"LImplies(AtomicProposition(""x1""),LImplies(LAnd(Eventually(Not(AtomicProposition(""x1""))),Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x1""))))",x1 -> F(!x1) & !x1 -> F(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE]
"
"Until(LEquiv(AtomicProposition(""x1""),AtomicProposition(""x2"")), Until(AtomicProposition(""x1""), AtomicProposition(""x3"")))",(x1 <-> x2) U (x1 U x3),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x3 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x3 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x3 = FALSE]
"
"LAnd(Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))),Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(!(x1 & x2)) & G(x1 | x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Next(Always(AtomicProposition(""x2""))))",G(x1 | x2) & X(G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x2 = TRUE];[x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x2 = TRUE];[x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x2 = TRUE]
"
"Always(LImplies(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))),Next(Eventually(AtomicProposition(""x2"")))))",G((!x1 & X(x1)) -> X(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"Always(LOr(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(F(x1) | F(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True, x2 = False];[x1 = True, x2 = False] FALSIFYING: [x1 = False, x2 = False];[x1 = False, x2 = False]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2""))))",x1 -> X(!x1) & F(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x1"")))",F(x1) -> G(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = True];[x1 = True] FALSIFYING: [x1 = False];[x1 = True];[x1 = False]
","SATISFYING: [x1 = TRUE];[x1 = TRUE] FALSIFYING: [x1 = FALSE];[x1 = TRUE];[x1 = FALSE]
"
"Always(Eventually(LImplies(AtomicProposition(""x1""),Next(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x3"")))))))",G(F(x1 -> X(x2 U !x3))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = FALSE]
","SATISFYING: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = FALSE, x2 = FALSE, x3 = FALSE] FALSIFYING: [x1 = TRUE, x2 = FALSE, x3 = TRUE];[x1 = FALSE, x2 = FALSE, x3 = TRUE]
"
"Always(Eventually(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x1"")))))",G(F(x1 -> !x1)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE]
"
"LAnd(Always(Eventually(Always(AtomicProposition(""x1"")))),Eventually(Always(Eventually(AtomicProposition(""x2"")))))",G(F(G(x1))) & F(G(F(x2))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Next(Next(Eventually(Next(AtomicProposition(""x1"")))))",X(X(F(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[x1 = True]; FALSIFYING: [];[];[];[x1 = False];
","SATISFYING: [];[];[];[x1 = True]; FALSIFYING: [];[];[];[x1 = False];
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(AtomicProposition(""x1"")))",(x1 U x2) & G(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = TRUE]
"
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE] FALSIFYING: [x1 = TRUE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"Next(Next(Eventually(Next(AtomicProposition(""x1"")))))",X(X(F(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [];[];[];[x1 = TRUE];[] FALSIFYING: [];[];[];[x1 = FALSE];[]
","SATISFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE] FALSIFYING: [x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE];[x1 = FALSE]
"
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",(F(x1)) -> (G(x2)),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
","SATISFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
"
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(AtomicProposition(""x1"")))",((x1) U (x2)) & G(x1),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
","SATISFYING: [x1 = TRUE, x2 = TRUE] FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
"
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1 ) & X(X(x1)))),gemini-1.5-pro,zero_shot_self_refine,"SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
","SATISFYING: [x1 = TRUE];[x1 = FALSE];[x1 = TRUE];[x1 = FALSE];[x1 = TRUE] FALSIFYING: [x1 = TRUE];[x1 = TRUE];[x1 = FALSE]
"
"Eventually(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",F(x1 -> G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Next(Next(Next(Next(Eventually(AtomicProposition(""x1""))))))",X(X(X(X(F(x1))))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(LAnd(AtomicProposition(""x1""),Always(Next(Not(AtomicProposition(""x2""))))))",F(x1 & G(X(!x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(Eventually(AtomicProposition(""x1"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Always(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x3"")))))",x1 -> G(x2 U !x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LOr(Eventually(AtomicProposition(""x2"")),Next(Not(AtomicProposition(""x3""))))))",G(x1 -> (F(x2) | X(!x3))),gemini-1.5-pro,few_shot,"LTL Formula: LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))))",G((x1 & X(x1)) -> X(X(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(LImplies(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))))",F(x1) & G(x1 -> X(G(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LOr(LOr(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2""))),LAnd(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x2"")))))",G((x1 & !x2) | (!x1 & x2) | (!x1 & !x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""X2"")))))",G (x1-> X(!x1 U X2)),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(Next(AtomicProposition(""x2"")))))",G(x1 -> F(X(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(Eventually(LImplies(AtomicProposition(""x4""),Not(LImplies(Eventually(Not(AtomicProposition(""x1""))),LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))))))",G (F(x4 -> (!(F !x1->(x2 & x3))))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LAnd(AtomicProposition(""x1""),Eventually(Not(AtomicProposition(""x1"")))))",G(x1 &  F(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LOr(LAnd(LAnd(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),Next(Next(AtomicProposition(""x1"")))),LAnd(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1"")))))))",G((x1 & X(!x1) & X(X(x1))) | (!x1 & X(x1) & X(X(!x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))",x1 & X(G(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))),AtomicProposition(""x1"")))",G ((!x2 & !x3) -> x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(AtomicProposition(""x1""),Always(LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))),Next(Next(Next(AtomicProposition(""x1""))))))))",x1 & G(x1 -> X(!x1) & X(X(!x1)) & X(X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Always(Not(AtomicProposition(""x1"")))))))",G((x1 & X(x1)) -> X(X(G(!x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(LAnd(AtomicProposition(""x1""),LOr(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3"")))),LImplies(Eventually(LAnd(AtomicProposition(""x2""),LOr(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x3""))))),LAnd(Eventually(LAnd(AtomicProposition(""x3""),LOr(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))),Always(AtomicProposition(""x3"")))))",x1 & (!x2 | !x3) -> F(x2 & (!x1 | !x3)) -> F(x3 & (!x2 | !x1)) & G(x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a""))
Positive trace: [a = TRUE];[a = TRUE];[a = TRUE]
FALSIFYING: [a = TRUE];[a = FALSE];[a = TRUE]
",
"Until(Not(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))), Eventually(Always(AtomicProposition(""x2""))))",!(x1 & !x2) U (F(G(x2))),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1->F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(LAnd(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x3""))),Always(AtomicProposition(""x2"")))",(!x1 & !x3) -> G(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(LAnd(Always(AtomicProposition(""x2"")),Eventually(AtomicProposition(""x1""))),Eventually(Not(AtomicProposition(""x1""))))",G(x2) & F(x1) & F(!x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
",
"Always(LImplies(Next(AtomicProposition(""x1"")),LAnd(AtomicProposition(""x2""),Not(Next(AtomicProposition(""x2""))))))",G(X(x1) -> (x2 & !X(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LEquiv(AtomicProposition(""x1""),Next(Next(Next(Next(Next(AtomicProposition(""x1""))))))))",G(x1<->X(X(X(X(X(x1)))))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"LOr(Always(Not(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x1""))))",G(!x1) | G(F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LAnd(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x"")),Next(AtomicProposition(""x2"")))),LImplies(AtomicProposition(""x2""),LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))))",G((x1->(!x & X(x2)) ) & (x2->(!x1 & X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(LOr(LAnd(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))),AtomicProposition(""x2""))",x1 & X(!x1) | !x1 & X(x1) -> x2,gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(LAnd(AtomicProposition(""x1""),Next(Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x1""))))))))",F(x1 & X(F(x1 & G(!x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Eventually(LImplies(LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))),Always(AtomicProposition(""x1""))))",F(!x2 & !x3 -> G(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a""))
Positive trace: [a = TRUE];[a = TRUE];[a = TRUE]
FALSIFYING: [a = TRUE];[a = FALSE];[a = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Not(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3""))),LImplies(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),Not(AtomicProposition(""x1""))))))",G(x1->!(x2 & x3) & ((x2 | x3)->!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LAnd(Until(Eventually(AtomicProposition(""x1"")), Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x3""))))",G(F(x1) U (!x2) & X(x3)),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G(x1 -> X(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LAnd(Next(AtomicProposition(""x1"")),Always(Eventually(AtomicProposition(""x1"")))))",G(X(x1) & G(F(x1))),gemini-1.5-pro,few_shot,"LTL Formula: LImplies(Until(AtomicProposition(""a""), AtomicProposition(""b"")), AtomicProposition(""c""))
Positive trace: [a = FALSE, b = TRUE, c = TRUE];[a = FALSE, b = FALSE, c = TRUE]
FALSIFYING: [a = TRUE, b = FALSE, c = FALSE];[a = TRUE, b = FALSE, c = FALSE]
",
"LOr(Next(Next(Next(Next(Next(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))))),Next(Next(Next(AtomicProposition(""x3"")))))",X(X(X(X(X(x1 & x2))))) | X(X(X(x3))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Until(AtomicProposition(""x1""), LAnd(Not(AtomicProposition(""x2"")),AtomicProposition(""x3"")))",x1 U (!x2 & x3),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Until(AtomicProposition(""x1""), LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))",x1 U (x2 & x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Next(Not(AtomicProposition(""x2""))))))",G(x1 ->X(X(!x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LEquiv(AtomicProposition(""x3""),LAnd(Next(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))))",G (x3 <-> (X(x1 & x2) & F(x1 & x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(LImplies(AtomicProposition(""x2""),Eventually(Not(AtomicProposition(""x1""))))))",(x1 U x2) & G(x2 -> F (!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))),Always(Until(Not(AtomicProposition(""x3"")), LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(x1 ->F(x2)) & G(!x3 U (x1 & x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),LImplies(LAnd(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x1""))))",F(x1 & x2) -> (!x1 U x1) & F(x2)->F(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) U (LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(LAnd(Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2"")))),Always(LImplies(AtomicProposition(""x2""),Next(AtomicProposition(""x3""))))),Always(LImplies(AtomicProposition(""x3""),Next(AtomicProposition(""x1"")))))",G(x1->X(x2)) & G(x2->X(x3)) & G(x3->X(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),LAnd(Until(AtomicProposition(""x2""), AtomicProposition(""x1"")),Always(AtomicProposition(""x3""))))",F(x1)->(x2 U x1) & G(x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(LAnd(AtomicProposition(""x3""),Eventually(AtomicProposition(""x2""))))))",G(x1->F(x3 & F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = TRUE];[a = TRUE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"Always(LAnd(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Next(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x2""))))))",G((x1->!x2) & X(!x1->X(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Next(Always(AtomicProposition(""x4""))))",x1 & x2 & x3 -> X(G(x4)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x3""))),Next(Next(Not(AtomicProposition(""x3"")))))))",G(x1->(X(!x2) & X(x3) & X(X(!x3)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))",G((x1 U !x1) & (!x1 U x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) && Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Always(Not(AtomicProposition(""x1""))),LAnd(LImplies(AtomicProposition(""x2""),Next(LAnd(Not(AtomicProposition(""x2"")),AtomicProposition(""x3"")))),LImplies(AtomicProposition(""x3""),Next(LAnd(Not(AtomicProposition(""x3"")),AtomicProposition(""x2""))))))",G(!x1) -> ((x2 -> X(!x2 & x3)) & (x3 ->X(!x3 & x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),LAnd(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3""))))",x1 & x2 & x3 -> F(x1) & F(x2) & F(x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(Next(LImplies(Not(AtomicProposition(""x1"")),LAnd(LAnd(AtomicProposition(""x2""),Next(Not(AtomicProposition(""x2"")))),LAnd(Not(AtomicProposition(""x3"")),Next(AtomicProposition(""x3"")))))))",G(X(!x1->((x2 & X(!x2)) & (!x3 & X(x3))))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(Eventually(AtomicProposition(""x1"")),LOr(Eventually(AtomicProposition(""x1"")),Eventually(Always(AtomicProposition(""x1""))))))",G(F(x1) -> (F(x1) | F(G(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LAnd(LAnd(LImplies(AtomicProposition(""x3""),LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2""))),LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3""))),Eventually(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")))))",G((x3->!x1 & x2) & ((x1 & x2) -> x3) & F(x1 & x2 & x3)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LImplies(Always(AtomicProposition(""x1"")),Until(Always(AtomicProposition(""x2"")), Not(AtomicProposition(""x3""))))",G(x1) -> G(x2) U (!x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LAnd(LAnd(LAnd(Eventually(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3""))),Next(LImplies(AtomicProposition(""x2""),Next(AtomicProposition(""x1""))))),Always(Until(AtomicProposition(""x4""), AtomicProposition(""x1"")))),Eventually(AtomicProposition(""x2""))))",G (F(x2 & x3) & (X (x2 -> X(x1))) & G(x4 U x1) & F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))",G(!x1 -> X(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",G(x1 -> G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(Until(Not(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x1""))),Next(Always(Not(AtomicProposition(""x1"")))))",!x1 U F(x1) & X(G(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Not(LAnd(AtomicProposition(""x2""),AtomicProposition(""x3"")))))",G(x1-> !(x2 & x3)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"Always(LAnd(LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3""))),LImplies(AtomicProposition(""x2""),AtomicProposition(""x3""))))",G((x1->x2 U x3) & (x2->x3)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE];[a = FALSE, b = FALSE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE]
",
"LImplies(Next(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",X(x1)->F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Always(AtomicProposition(""x1"")),Next(Next(Not(AtomicProposition(""x2"")))))",G(x1) & X(X(!x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) || Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(Until(AtomicProposition(""x1""), Eventually(AtomicProposition(""x2""))))",G(x1 U F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) -> F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(Always(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3"")))",G(x1 & x2) -> F(x3),gemini-1.5-pro,few_shot,"LTL Formula: LImplies(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Eventually(AtomicProposition(""x2"")),Eventually(AtomicProposition(""x3"")))))",G(x1 -> (F(x2) & F(x3))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(Until(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x3""))), LImplies(Not(AtomicProposition(""x1"")),AtomicProposition(""x3""))))",G((x1->!x3) U (!x1->x3)),gemini-1.5-pro,few_shot,"LTL Formula: Always(Eventually(AtomicProposition(""a"")))
Positive trace: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE]
FALSIFYING: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),LImplies(LOr(Next(Not(AtomicProposition(""x1""))),Not(AtomicProposition(""x1""))),Next(AtomicProposition(""x1"")))))",G(x1->X(!x1) | !x1->X(x1)),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LOr(Next(AtomicProposition(""x1"")),Always(AtomicProposition(""x1"")))",X(x1) | G(x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LAnd(Until(AtomicProposition(""x1""), LOr(AtomicProposition(""x2""),AtomicProposition(""x3""))),Eventually(AtomicProposition(""x3""))))",G(x1 U (x2 | x3) & F(x3)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Always(LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),Next(AtomicProposition(""x3"")))),Eventually(AtomicProposition(""x3"")))",G((x1 & x2) ->X(x3)) & F(x3),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LOr(Always(Not(AtomicProposition(""x2""))),Always(Until(AtomicProposition(""x2""), AtomicProposition(""x1""))))",G(!x2) | G(x2 U x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) && Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),Next(AtomicProposition(""x3"")))",x1 & x2 & X(x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(F(x1 & x2)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G (x1 ->(X(!x1) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1""))))))",( !x1) U (x1 & X(G (!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Not(Eventually(LAnd(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",!F(x1 & X(x1 ) & X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G (x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Until(AtomicProposition(""x1""), Always(Not(AtomicProposition(""x1""))))",(x1) U (G(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(LImplies(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1"")))))))",F(x1) & G(x1 -> X(G(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(Not(AtomicProposition(""x1""))))))",G(x1 & X(x1) -> X(X(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LOr(AtomicProposition(""x2""),Eventually(AtomicProposition(""x2"")))))",G(x1 -> x2 | F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Eventually(Not(AtomicProposition(""x1""))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(Always(Not(AtomicProposition(""x1"")))))))",F(!x1) & G(!x1 -> X(G(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Eventually(LAnd(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))),Eventually(LAnd(AtomicProposition(""x3""),Until(Not(AtomicProposition(""x3"")), AtomicProposition(""x2"")))))",F (x1 & F (x2)) & F (x3 & (!x3 U x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x2"")),Always(Next(Next(AtomicProposition(""x3"")))))))",G(x1 -> (X(x2) & G(X(X(x3))))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"Eventually(AtomicProposition(""x1""))",F(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) & F(x2),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Eventually(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3"")))",F(x1 | x2) & F(x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Eventually(AtomicProposition(""x1""))",F(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2"")))",F(x1) & F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Always(Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2"")))",G (!x1) & F(x2),gemini-1.5-pro,few_shot,"LTL Formula: LImplies(AtomicProposition(""x1""), LImplies(AtomicProposition(""x2""), Eventually(AtomicProposition(""x3""))))
Positive trace: [x1 = FALSE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = FALSE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE];[x1 = TRUE, x2 = TRUE, x3 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) & G(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(AtomicProposition(""b""),Next(LOr(Until(AtomicProposition(""c""), AtomicProposition(""a"")),Always(AtomicProposition(""c"")))))",b -> X((c U a) | (G(c))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""b"")),Until(Not(AtomicProposition(""b"")), LAnd(AtomicProposition(""a""),Not(AtomicProposition(""b"")))))",(F(b) -> (!b U (a & !b))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LOr(LOr(AtomicProposition(""a""),AtomicProposition(""b"")),AtomicProposition(""c"")))",G( a | b | c),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""e""))))",G(a -> F(e)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Next(Next(Next(AtomicProposition(""b""))))))",G(a -> X(X(X b))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(Until(AtomicProposition(""e""), Always(Eventually(AtomicProposition(""d"")))))",G(e U (G(F(d)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),AtomicProposition(""b"")))",G(a -> b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))",G(a & b),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1=FALSE, x2=FALSE]
",
"LAnd(Always(AtomicProposition(""a"")),Always(LImplies(AtomicProposition(""b""),Not(AtomicProposition(""c"")))))",G(a) & G(b -> !c),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""b"")))),Always(Eventually(AtomicProposition(""c""))))",G(a -> F (b)) -> G(F(c)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(Always(Eventually(AtomicProposition(""a""))),Always(Eventually(AtomicProposition(""b""))))",G(F(a)) -> G(F(b)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LOr(Always(Eventually(AtomicProposition(""a""))),Always(Eventually(AtomicProposition(""b""))))",G(F(a)) | G(F(b)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(Always(Not(AtomicProposition(""a""))))",F(G(!a)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""b""), AtomicProposition(""a"")))
Positive trace: [a = TRUE, b = FALSE];[a = TRUE, b = TRUE];[a = FALSE, b = FALSE]
FALSIFYING: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
",
"Always(LImplies(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))),Eventually(AtomicProposition(""c""))))",G (!(a & b) -> F(c)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Eventually(AtomicProposition(""x2""))))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))),Always(LOr(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)) & G(a | b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(LEquiv(AtomicProposition(""a""),AtomicProposition(""b"")),LEquiv(AtomicProposition(""c""),AtomicProposition(""d""))))",G ((a <-> b) -> (c <-> d)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Until(Not(AtomicProposition(""a"")), AtomicProposition(""b""))",(!a) U b,gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) || Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Next(Always(Not(AtomicProposition(""b""))))))",G (a -> X(G(!b))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(Or(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
",
"LOr(Until(AtomicProposition(""b""), LAnd(AtomicProposition(""b""),Not(AtomicProposition(""a"")))),Always(AtomicProposition(""b"")))",(b U (b & ! a)) | G(b),gemini-1.5-pro,few_shot,"LTL Formula: Globally(AtomicProposition(""p""))
Positive trace: [p = TRUE];[p = TRUE];[p = TRUE]
FALSIFYING: [p = TRUE];[p = FALSE];[p = TRUE]
",
"Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b""))))",G !(a & b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(LAnd(AtomicProposition(""a""),Next(AtomicProposition(""b""))),Next(Next(AtomicProposition(""c"")))))",G (a & X(b) -> X(X(c))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE];[a = FALSE, b = FALSE]
FALSIFYING: [a = FALSE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Next(Eventually(AtomicProposition(""b"")))))",G (a -> X(F(b))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"LAnd(AtomicProposition(""a""),Always(LImplies(AtomicProposition(""a""),LAnd(LAnd(LAnd(LAnd(Next(Not(AtomicProposition(""a""))),Next(Next(Not(AtomicProposition(""a""))))),Next(Next(Next(Not(AtomicProposition(""a"")))))),Next(Next(Next(Next(Not(AtomicProposition(""a""))))))),Next(Next(Next(Next(Next(AtomicProposition(""a""))))))))))",a & G(a -> X(!a) & X(X(!a)) & X(X(X(!a))) & X(X(X(X(!a)))) & X(X(X(X(X(a)))))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LOr(Always(Eventually(AtomicProposition(""a""))),Next(AtomicProposition(""b"")))",G(F(a)) | X(b),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
",
"Always(AtomicProposition(""a""))",G (a),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),LOr(AtomicProposition(""b""),Next(AtomicProposition(""b"")))))",G (a -> (b | X(b))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Eventually(AtomicProposition(""b""))))",G (a -> F(b)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""req""), Next(AtomicProposition(""gnt""))))
Positive trace: [req = FALSE, gnt = FALSE];[req = FALSE, gnt = FALSE];[req = TRUE, gnt = TRUE]
FALSIFYING: [req = TRUE, gnt = FALSE];[req = FALSE, gnt = TRUE];[req = TRUE, gnt = FALSE]
",
"Always(LOr(LOr(AtomicProposition(""a""),Next(AtomicProposition(""a""))),Next(Next(AtomicProposition(""a"")))))",G(a | X(a) | X(X(a))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(Not(AtomicProposition(""a"")),LOr(Next(Not(AtomicProposition(""a""))),Next(Next(AtomicProposition(""a""))))))",G(!a -> (X(!a) | X(X(a)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = FALSE];[a = TRUE, b = FALSE];[a=FALSE, b=TRUE]
",
"Always(LImplies(AtomicProposition(""a""),LOr(LOr(Next(Not(AtomicProposition(""a""))),Next(Next(Not(AtomicProposition(""a""))))),Next(Next(Next(AtomicProposition(""a"")))))))",G(a -> (X(!a) | X(X(!a)) | X(X(X(a))))),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Next(AtomicProposition(""b""))))",G ( a -> X(b)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Eventually(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))",F (a & b),gemini-1.5-pro,few_shot,"LTL Formula: Globally(Or(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
",
"LAnd(Eventually(AtomicProposition(""a"")),Eventually(AtomicProposition(""b"")))",F(a) & F(b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LEquiv(AtomicProposition(""a""),Next(AtomicProposition(""b""))))",G(a <-> X(b)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"LOr(Until(AtomicProposition(""a""), AtomicProposition(""b"")),Always(AtomicProposition(""a"")))",(a U b) | G(a),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(AtomicProposition(""x2""),AtomicProposition(""x1"")))",G(x2 -> x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""p1""), AtomicProposition(""p2"")))
Positive trace: [p1 = FALSE, p2 = FALSE];[p1 = TRUE, p2 = TRUE]
FALSIFYING: [p1 = TRUE, p2 = FALSE];[p1 = FALSE, p2 = TRUE]
",
"Always(LEquiv(AtomicProposition(""x1""),AtomicProposition(""x2"")))",G(x1 <-> x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(AtomicProposition(""a""),Until(AtomicProposition(""c""), AtomicProposition(""b""))))",G(a -> (c U b)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(Not(LAnd(AtomicProposition(""a""),AtomicProposition(""b"")))),Always(LOr(AtomicProposition(""a""),AtomicProposition(""b""))))",G(!(a & b)) & G(a | b),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")), Next(AtomicProposition(""x1""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Until(Not(AtomicProposition(""a"")), AtomicProposition(""b""))",(!a) U b,gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1"")) Unless AtomicProposition(""x2"")
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LOr(Until(AtomicProposition(""a""), AtomicProposition(""b"")),Always(AtomicProposition(""a"")))",(a U b) | G(a),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Until(Not(AtomicProposition(""p"")), Until(AtomicProposition(""p""), Until(Not(AtomicProposition(""p"")), Until(AtomicProposition(""p""), Always(Not(AtomicProposition(""p"")))))))",!p U (p U (!p U (p U G(!p)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),LOr(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),AtomicProposition(""x4"")))))",G!(x1 & (x2 | x3 | x4)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),LOr(AtomicProposition(""x2""),AtomicProposition(""x1"")))))",G!(x1 & (x2 | x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G!(x1 & x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(Until(AtomicProposition(""x2""), LAnd(AtomicProposition(""x3""),AtomicProposition(""x4"")))))",x1 -> X(x2 U (x3 & x4)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Eventually(LImplies(AtomicProposition(""x1""),Eventually(Not(AtomicProposition(""x1"")))))",F(x1 -> F(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(AtomicProposition(""r""),Not(Next(AtomicProposition(""b""))))",r & !X(b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""r""),Next(LAnd(Not(AtomicProposition(""r"")),Next(AtomicProposition(""r""))))))",G(r -> X(!r & X(r))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(AtomicProposition(""r""),Not(Next(AtomicProposition(""b""))))",r & !X(b),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(Not(AtomicProposition(""r"")))",G(!r),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Next(Always(Not(AtomicProposition(""x1""))))))",(!x1) U (x1 & X(G(!x1))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"Not(Eventually(LAnd(LAnd(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",!F(x1 & X(x1) & X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1-> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"LAnd(Until(AtomicProposition(""r""), Not(AtomicProposition(""r""))),Always(LImplies(Not(AtomicProposition(""r"")),Always(Not(AtomicProposition(""r""))))))",(r U !r) & (G(!r -> G(!r))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(Eventually(AtomicProposition(""r"")))",G(F(r)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = TRUE];[a = FALSE, b = FALSE];[a = FALSE, b = FALSE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"Next(Next(Eventually(Next(AtomicProposition(""r"")))))",X(X(F(X(r)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""r"")),Always(AtomicProposition(""b"")))",F(r) -> G(b),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"LAnd(Until(AtomicProposition(""r""), AtomicProposition(""b"")),Always(AtomicProposition(""r"")))",(r U b) & G(r),gemini-1.5-pro,few_shot,"LTL Formula: LImplies(Eventually(AtomicProposition(""a"")), Always(AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
FALSIFYING: [a = FALSE, b = TRUE];[a = TRUE, b = TRUE];[a = FALSE, b = FALSE]
",
"Always(LImplies(AtomicProposition(""r""),LAnd(Next(Not(AtomicProposition(""r""))),Next(Next(AtomicProposition(""r""))))))",G(r -> X(!r) & X(X(r))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(AtomicProposition(""r""),Not(Next(AtomicProposition(""g"")))))",G(r -> !X(g)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(LAnd(AtomicProposition(""b""),Next(Eventually(AtomicProposition(""b"")))))",F(b & X(F(b))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(AtomicProposition(""x1""),Always(LImplies(AtomicProposition(""x1""),Next(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))))",x1 & G(x1 -> X(!x1 & X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Until(Not(AtomicProposition(""x1"")), LAnd(AtomicProposition(""x1""),Always(Not(Next(AtomicProposition(""x1""))))))",!x1 U (x1 & G(!X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(LOr(Not(AtomicProposition(""x1"")),AtomicProposition(""x2"")),Next(Not(AtomicProposition(""x3"")))))",G((!x1 | x2) -> X(!x3)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(LNot(AtomicProposition(""x1"")), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G(x1 -> X(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))))",G(x1 & !x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Next(AtomicProposition(""x1"")))",(x1 & !x2) -> X(x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = TRUE, b = FALSE]
",
"LImplies(LAnd(Not(AtomicProposition(""x1"")),AtomicProposition(""x2"")),Eventually(AtomicProposition(""x3"")))",(!x1 & x2) -> F(x3 ),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2"")))",x1 -> F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),AtomicProposition(""x2""))",x1 -> x2,gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Until(AtomicProposition(""x2""), AtomicProposition(""x3"")))",x1 -> (x2 U x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(AtomicProposition(""x1""))",G (x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(Eventually(AtomicProposition(""x1"")))",G (F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = TRUE]
FALSIFYING: [a = FALSE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE]
FALSIFYING: [a = FALSE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(Until(Not(AtomicProposition(""x2"")), AtomicProposition(""x3"")))))",G(x1 -> G(!x2 U x3)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a""))
Positive trace: [a = TRUE];[a = TRUE];[a = TRUE]
FALSIFYING: [a = TRUE];[a = FALSE];[a = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G (x1 -> G(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),AtomicProposition(""x2"")))",G (x1 -> x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Always(Eventually(AtomicProposition(""x2"")))))",G(x1 -> G(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))",G ( !x2 -> !x1 ),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Until(AtomicProposition(""x1""), AtomicProposition(""x4""))))",G(x1 & x2 & x3 -> (x1 U x4)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) -> G(F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) And Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(Always(AtomicProposition(""x1"")))",F(G(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(Eventually(AtomicProposition(""x1"")))",G(F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(Not(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))))",G!(x1 & !x2),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(Eventually(AtomicProposition(""x1"")))",G(F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE]
",
"Eventually(Always(AtomicProposition(""x1"")))",F(G(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) -> G(F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(LAnd(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),AtomicProposition(""x3"")),Until(AtomicProposition(""x2""), AtomicProposition(""x4""))))",G (x1 & x2 & x3 -> (x2 U x4)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(Eventually(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x2""))))",G(F(x1)) &G(F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x2""),Next(Until(Not(AtomicProposition(""x2"")), AtomicProposition(""x1"")))))",G(x2->X(!x2 U x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))",G (x1 -> X(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(LAnd(AtomicProposition(""x3""),AtomicProposition(""x2"")),AtomicProposition(""x1"")))",G(x3 & x2 -> x1),gemini-1.5-pro,few_shot,"LTL Formula: Globally(AtomicProposition(""x1"")) U (AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Next(Next(Next(Next(Eventually(AtomicProposition(""x1""))))))",X(X(X(X(F(x1))))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a""))
Positive trace: [a = TRUE, b = FALSE];[a = TRUE, b = TRUE];[a = TRUE, b = FALSE]
FALSIFYING: [a = TRUE, b = TRUE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),Eventually(AtomicProposition(""x2""))))",G(x1 -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> X(!x1) & X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LAnd(Eventually(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x2""))))",F(x1) & G(!x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a""))
Positive trace: [a = TRUE];[a = TRUE];[a = TRUE]
FALSIFYING: [a = TRUE];[a = FALSE];[a = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2"")))))",G(x1 -> X(!x1 U x2)),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE]
",
"Eventually(LImplies(AtomicProposition(""x1""),Always(AtomicProposition(""x2""))))",F(x1 -> G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = FALSE, b = FALSE]
",
"Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x2"")))))",F(x1 & G(!x2)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LAnd(Not(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x1""))))",G(!x1 & F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(Eventually(AtomicProposition(""a"")))
Positive trace: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE]
FALSIFYING: [a = FALSE, b = TRUE];[a = FALSE, b = TRUE];[a = FALSE, b = TRUE]
",
"LAnd(Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))",G(x1 -> X(!x1)) & G(!x1 -> X(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LEquiv(Next(AtomicProposition(""x1"")),LEquiv(AtomicProposition(""x2""),Next(Not(AtomicProposition(""x2""))))))",G(X(x1) <-> (x2 <-> X(!x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),LAnd(LAnd(Next(AtomicProposition(""x1"")),Next(Next(AtomicProposition(""x1"")))),Next(Next(Next(Not(AtomicProposition(""x1"")))))))",x1 -> (X(x1) & X(X(x1)) & X(X(X(!x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))))",G(x1 -> X(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1"")))))",G((x1 U !x1) & (F(!x1 U x1)) ),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Eventually(LImplies(AtomicProposition(""x1""),LOr(Next(Next(Always(Not(AtomicProposition(""x1""))))),Always(Not(AtomicProposition(""x1""))))))",F(x1->(X(X(G(!x1)))) | G(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(Until(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")), AtomicProposition(""x3"")))",G((x1 & x2) U x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(Eventually(AtomicProposition(""x1"")))",F(F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Eventually(LAnd(Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),Always(LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))))))",F(G(x1->X!x1) & G(!x1->X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Until(AtomicProposition(""x1""), LAnd(AtomicProposition(""x2""),Next(Next(AtomicProposition(""x2"")))))",x1 U (x2 & X(X(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) Or Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LOr(Always(AtomicProposition(""x1"")),Eventually(Not(AtomicProposition(""x1"")))))",G(G(x1) | F(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1"")) U AtomicProposition(""x2"")
Positive trace: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(LAnd(Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Until(AtomicProposition(""x1""), AtomicProposition(""x2""))),Until(AtomicProposition(""x2""), AtomicProposition(""x1"")))",G(x1 | x2) & x1 U x2 & x2 U x1,gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(LImplies(AtomicProposition(""x1""),Next(LOr(AtomicProposition(""x2""),AtomicProposition(""X3""))))),Always(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))))))",G(x1 -> X(x2 | X3)) & G(x1-> (!x2 & !x3)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x2"")),Until(Not(AtomicProposition(""x2"")), LAnd(AtomicProposition(""x1""),AtomicProposition(""x3""))))",F(x2) -> !x2 U (x1 & x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Not(Eventually(Not(AtomicProposition(""x1""))))",!F(!x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Always(LAnd(LAnd(AtomicProposition(""x1""),Until(Always(AtomicProposition(""x2"")), AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2""))))",G(x1 & (G(x2) U x1) & F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2"")))),Eventually(AtomicProposition(""x3"")))",G(x1& !x2) & F(x3),gemini-1.5-pro,few_shot,"LTL Formula: Globally(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Always(Eventually(AtomicProposition(""x1""))),Eventually(Always(AtomicProposition(""x1""))))",G(F(x1)) -> F(G(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x2""))))",x1 & !x2 -> F(!x1 U x2 ),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = FALSE, b = FALSE]
",
"LImplies(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Always(LImplies(AtomicProposition(""x1""),LImplies(LAnd(AtomicProposition(""x2""),AtomicProposition(""x2"")),AtomicProposition(""x1"")))))",(F(x1) & F(x2)) -> G(x1 -> x2 & x2 -> x1),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Until(Not(Always(AtomicProposition(""x1""))), Always(Not(AtomicProposition(""x1""))))",!(G(x1)) U G(!x1),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1"")))))",F(x1) -> G(x1 U !x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LAnd(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1"")))),LImplies(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1"")))))",G((x1 -> X(!x1)) & (!x1 -> X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = FALSE, b = FALSE]
FALSIFYING: [a = FALSE, b = FALSE];[a = FALSE, b = FALSE];[a = FALSE, b = FALSE]
",
"Always(Eventually(Next(AtomicProposition(""x1""))))",G(F(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(AtomicProposition(""x1"")),Always(Not(AtomicProposition(""x1""))))",G(x1) & G(!x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LAnd(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Next(Next(AtomicProposition(""x1""))),Next(AtomicProposition(""x1"")))",X(X(x1))->X(x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(LAnd(AtomicProposition(""x1""),Always(Not(AtomicProposition(""x1"")))))",F(x1 & G(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Always(Until(Eventually(AtomicProposition(""x2"")), Next(AtomicProposition(""x1""))))",G(F(x2) U X(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LOr(AtomicProposition(""a""), AtomicProposition(""b"")))
Positive trace: [a = FALSE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = FALSE]
FALSIFYING: [a = FALSE, b = FALSE];[a = FALSE, b = FALSE];[a = FALSE, b = FALSE]
",
"LImplies(Next(Always(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x1"")))",X(G(x1)) -> F(x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
",
"Until(AtomicProposition(""x3""), LAnd(LOr(AtomicProposition(""x1""),Always(AtomicProposition(""x3""))),Eventually(AtomicProposition(""x2""))))",x3 U ((x1 | G(x3)) & F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x1"")))",x1 -> X(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) && Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Eventually(LAnd(Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x1"")),Next(Next(Not(AtomicProposition(""x1""))))))),Always(LImplies(Not(AtomicProposition(""x1"")),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))))",F(G(x1 -> X(x1) & X(X(!x1))) & G(!x1->X(!x1) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
",
"LImplies(AtomicProposition(""x1""),Always(LAnd(Not(AtomicProposition(""x2"")),Eventually(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))))",(x1 -> G(!x2 & F(!x1 U x1))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LAnd(Until(AtomicProposition(""x1""), Not(AtomicProposition(""x1""))),Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))))",G(x1 U !x1 & !x1 U x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Eventually(LOr(LEquiv(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x2"")))),Always(AtomicProposition(""x2""))))",F((x1 <-> X(!x2)) | G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x2""),LImplies(LAnd(Not(Eventually(AtomicProposition(""x1""))),AtomicProposition(""x3"")),Not(Eventually(AtomicProposition(""x2""))))))",G(x2 -> !F(x1) & x3 -> !F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Eventually(Always(Until(AtomicProposition(""x1""), AtomicProposition(""x2""))))",F(G(x1 U x2)),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")),LAnd(Next(AtomicProposition(""x3"")),Next(Next(Not(AtomicProposition(""x3""))))))",(x1 & x2) -> (X(x3) & X(X(!x3))),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x1""))),LImplies(Next(AtomicProposition(""x1"")),Next(Next(AtomicProposition(""x1"")))))",(x1 -> X(x1)) & (X(x1) -> X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Eventually(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x1"")))))",x1 -> F(x2 U !x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Next(Next(Next(AtomicProposition(""x1"")))),LAnd(Eventually(Not(AtomicProposition(""x2""))),AtomicProposition(""x3"")))",X(X(X(x1))) -> (F(!x2) & x3),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(Until(AtomicProposition(""x1""), AtomicProposition(""x2""))),Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(x1 U x2) & G(!(x1 & x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(Eventually(Next(Next(Next(AtomicProposition(""x1""))))))",G(F(X(X(X(x1))))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LAnd(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))),LImplies(AtomicProposition(""x2""),Not(AtomicProposition(""x1"")))))",G((x1 -> ! x2) & (x2 -> ! x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"Always(LImplies(Next(Next(Next(AtomicProposition(""x1"")))),AtomicProposition(""x2"")))",G(X(X(X(x1))) -> x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Eventually(Always(Eventually(AtomicProposition(""x1""))))",F(G(F(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(Next(Not(AtomicProposition(""x1""))),AtomicProposition(""x1"")))",G(X(!x1) -> x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) And Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Always(LImplies(AtomicProposition(""x1""),LAnd(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x3""))))),Always(LImplies(LOr(AtomicProposition(""x2""),AtomicProposition(""x3"")),Not(AtomicProposition(""x1"")))))",G(x1->!x2 & !x3) & G(x2 | x3 -> !x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(AtomicProposition(""x2"")),Next(Next(Not(AtomicProposition(""x3"")))))))",G(x1 -> (X(x2) & X(X(!x3)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Always(LImplies(LAnd(Eventually(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))),AtomicProposition(""x2"")),Not(AtomicProposition(""x2""))))",G(F(x1 -> X(!x1)) & x2 -> !x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = TRUE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE];[a = FALSE, b = FALSE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
",
"LImplies(Always(Not(AtomicProposition(""x1""))),LOr(Always(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(!x1) -> (G(x1) | F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(Always(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(G(x1) -> F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LOr(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(LImplies(AtomicProposition(""x1""),Next(Not(AtomicProposition(""x1""))))))",(x1 U x2) | G(x1 -> X(!x1)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""),Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LAnd(Next(AtomicProposition(""x1"")),Eventually(LImplies(AtomicProposition(""x1""),AtomicProposition(""x2"")))))",G(X(x1) & F(x1 -> x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
",
"LImplies(Next(Until(Not(AtomicProposition(""x1"")), AtomicProposition(""x1""))),Eventually(Not(AtomicProposition(""x1""))))",X(!x1 U x1) -> F(!x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Eventually(LAnd(AtomicProposition(""x2""),AtomicProposition(""x1""))),LOr(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Next(AtomicProposition(""x2""))))",F(x2 & x1) -> (x1 U x2) | (X(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""a""), Next(AtomicProposition(""b""))))
Positive trace: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = TRUE, b = FALSE];[a = FALSE, b = TRUE]
",
"LImplies(AtomicProposition(""x1""),Eventually(Always(AtomicProposition(""x1""))))",x1 -> F(G(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(LImplies(LAnd(LAnd(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))),Eventually(AtomicProposition(""x3""))),AtomicProposition(""x4"")),LImplies(LOr(LOr(Not(Eventually(AtomicProposition(""x1""))),Not(Eventually(AtomicProposition(""x2"")))),Not(Eventually(AtomicProposition(""x3"")))),Not(AtomicProposition(""x4""))))",((F(x1) & F(x2) & F(x3)) -> x4) & (!F(x1) | !F(x2) | !F(x3) -> !x4),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LAnd(Always(LAnd(LImplies(Not(AtomicProposition(""x1"")),Not(AtomicProposition(""x2""))),LImplies(Not(AtomicProposition(""x2"")),Not(AtomicProposition(""x1""))))),Eventually(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(((!x1) -> (!x2)) & ((!x2)->(!x1))) & F(x1 & x2),gemini-1.5-pro,few_shot,"LTL Formula: LAnd(Eventually(AtomicProposition(""x1"")), Eventually(AtomicProposition(""x2"")))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Next(AtomicProposition(""x1"")),Next(Next(Next(AtomicProposition(""x2"")))))",X(x1)->X(X(X(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LAnd(AtomicProposition(""x1""),Not(AtomicProposition(""x2""))))",G(x1 & !x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) And Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LOr(Eventually(Always(AtomicProposition(""x1""))),Always(Eventually(AtomicProposition(""x1""))))",F(G(x1)) | G(F(x1)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LImplies(AtomicProposition(""x1""),LImplies(LAnd(Eventually(Not(AtomicProposition(""x1""))),Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x1""))))",x1 -> F(!x1) & !x1 -> F(x1),gemini-1.5-pro,few_shot,"LTL Formula: LUntil(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"Until(LEquiv(AtomicProposition(""x1""),AtomicProposition(""x2"")), Until(AtomicProposition(""x1""), AtomicProposition(""x3"")))",(x1 <-> x2) U (x1 U x3),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE];[x1 = TRUE]
FALSIFYING: [x1 = FALSE];[x1 = FALSE]
",
"LAnd(Always(Not(LAnd(AtomicProposition(""x1""),AtomicProposition(""x2"")))),Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))))",G(!(x1 & x2)) & G(x1 | x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(LOr(AtomicProposition(""x1""),AtomicProposition(""x2""))),Next(Always(AtomicProposition(""x2""))))",G(x1 | x2) & X(G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Globally(LImplies(AtomicProposition(""x1""), Next(AtomicProposition(""x2""))))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"Always(LImplies(LAnd(Not(AtomicProposition(""x1"")),Next(AtomicProposition(""x1""))),Next(Eventually(AtomicProposition(""x2"")))))",G((!x1 & X(x1)) -> X(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LOr(Eventually(AtomicProposition(""x1"")),Eventually(AtomicProposition(""x2""))))",G(F(x1) | F(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Always(LImplies(AtomicProposition(""x1""), AtomicProposition(""x2"")))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Eventually(AtomicProposition(""x2""))))",x1 -> X(!x1) & F(x2),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x1"")))",F(x1) -> G(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""a"")) U Eventually(AtomicProposition(""b""))
Positive trace: [a = TRUE, b = FALSE];[a = TRUE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = FALSE]
",
"Always(Eventually(LImplies(AtomicProposition(""x1""),Next(Until(AtomicProposition(""x2""), Not(AtomicProposition(""x3"")))))))",G(F(x1 -> X(x2 U !x3))),gemini-1.5-pro,few_shot,"LTL Formula: Globally(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(Eventually(LImplies(AtomicProposition(""x1""),Not(AtomicProposition(""x1"")))))",G(F(x1 -> !x1)),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"LAnd(Always(Eventually(Always(AtomicProposition(""x1"")))),Eventually(Always(Eventually(AtomicProposition(""x2"")))))",G(F(G(x1))) & F(G(F(x2))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = TRUE]
",
"Next(Next(Eventually(Next(AtomicProposition(""x1"")))))",X(X(F(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",F(x1) -> G(x2),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(AtomicProposition(""x1"")))",(x1 U x2) & G(x1),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = TRUE];[x1 = TRUE, x2 = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""x1""))
Positive trace: [x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
FALSIFYING: [x1 = FALSE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
"LImplies(AtomicProposition(""x1""),Next(Next(Next(AtomicProposition(""x1"")))))",x1 -> X(X(X(x1))),gemini-1.5-pro,few_shot,"LTL Formula: Until(AtomicProposition(""a""), AtomicProposition(""b""))
Positive trace: [a = FALSE, b = FALSE];[a = FALSE, b = TRUE]
FALSIFYING: [a = TRUE, b = FALSE];[a = FALSE, b = FALSE];[a = FALSE, b = FALSE]
",
"Next(Next(Eventually(Next(AtomicProposition(""x1"")))))",X(X(F(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Release(AtomicProposition(""x1""), AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = FALSE, x2 = TRUE];[x1 = FALSE, x2 = FALSE];[x1 = TRUE, x2 = FALSE]
",
"LImplies(Eventually(AtomicProposition(""x1"")),Always(AtomicProposition(""x2"")))",(F(x1)) -> (G(x2)),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"LAnd(Until(AtomicProposition(""x1""), AtomicProposition(""x2"")),Always(AtomicProposition(""x1"")))",((x1) U (x2)) & G(x1),gemini-1.5-pro,few_shot,"LTL Formula: Eventually(AtomicProposition(""a""))
Positive trace: [a = FALSE];[a = TRUE]
FALSIFYING: [a = FALSE];[a = FALSE]
",
"Always(LImplies(AtomicProposition(""x1""),LAnd(Next(Not(AtomicProposition(""x1""))),Next(Next(AtomicProposition(""x1""))))))",G(x1 -> (X(!x1 ) & X(X(x1)))),gemini-1.5-pro,few_shot,"LTL Formula: Always(AtomicProposition(""x1"")) && Eventually(AtomicProposition(""x2""))
Positive trace: [x1 = TRUE, x2 = FALSE];[x1 = TRUE, x2 = TRUE]
FALSIFYING: [x1 = TRUE, x2 = FALSE];[x1 = FALSE, x2 = FALSE]
",
